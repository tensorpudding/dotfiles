;; Load elips dir
(when (stringp elisp-dir) (add-to-list 'load-path elisp-dir))

;; Load Haskell mode
(when haskell-enabled
  (add-to-list 'load-path haskell-elisp-dir) ;; Haskell major modes
  (load (concat haskell-elisp-dir "haskell-site-file.el")) ;; Loading Haskell major mode
  (autoload 'haskell-mode "haskell-mode" "Major mode for editing Haskell" t)
  (autoload 'literate-haskell-mode "haskell-mode" 
    "Major mode for editing literate Haskell" t)
  (add-to-list 'auto-mode-alist '("\\.[hg]s$" . haskell-mode))
  (add-to-list 'auto-mode-alist '("\\.[hi]$" . haskell-mode))
  (add-to-list 'auto-mode-alist '("\\.l[hg]s$" . literate-haskell-mode))
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent))

;; Load Tuareg mode
(when tuareg-enabled
  (add-to-list 'load-path tuareg-elisp-dir)
  (load (concat tuareg-elisp-dir "tuareg.el"))
  (autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
  (autoload 'camldebug "camldebug" "Run the Caml debugger" t)
  (add-to-list 'auto-mode-alist '("\\.ml$" . tuareg-mode)))

;; Load D mode
(when d-enabled
  (add-to-list 'load-path d-elisp-dir)
  (autoload 'd-mode "d-mode" "Major mode for editing D code." t)
  (add-to-list 'auto-mode-alist '("\\.d[i]?\\'" . d-mode)))

;; Load Proof General
(when proof-enabled
  (add-to-list 'load-path proof-elisp-dir)
  (load-file (concat proof-elisp-dir "generic/proof-site.el")))

;; Load Clojure mode
(when clojure-enabled
  (add-to-list 'load-path clojure-elisp-dir)
  (require 'clojure-mode))

;; Loading swank-clojure
(when swank-clojure-enabled
  (add-to-list 'load-path swank-clojure-elisp-dir)
  (require 'swank-clojure-autoload))

;; Loading Go mode
(when go-enabled
  (add-to-list 'load-path go-elisp-dir)
  (require 'go-mode-load))

;; Loading ESS
(when ess-enabled
  (add-to-list 'load-path ess-elisp-dir)
  (load (concat ess-elisp-dir "lisp/ess-site")))

;; Loding Rinari
(when rinari-enabled
  (add-to-list 'load-path rinari-elisp-dir)
  (require 'rinari))

;; Loading Erlang
(when erlang-enabled
  (setq exec-path (cons (concat erlang-root-dir "bin") exec-path))
  (add-to-list 'load-path (concat erlang-root-dir "lib/tools-"
				  erlang-tools-version "/emacs"))
  (require 'erlang-start))

;; Loading AucTeX
(when auctex-enabled
  (load (concat auctex-elisp-dir "auctex.el") nil t t)
  (load (concat auctex-elisp-dir "preview-latex.el") nil t t))

;; Loading DVC
(when dvc-enabled
  (add-to-list 'load-path dvc-elisp-dir)
  (if (equal (getenv "OS") "Windows_NT")
      (require 'dvc-autoloads)
    (load (concat dvc-elisp-dir "++build/dvc-load.el"))))

;; Loading CEDET
(when cedet-enabled
  (load-file (concat cedet-elisp-dir "common/cedet.el"))
  (when cedet-ede-enabled (global-ede-mode 1))
  (when cedet-completion-enabled (semantic-load-enable-code-helpers))
  (when cedet-template-enabled (global-srecode-minor-mode 1)))

;; Loading ECB
(when ecb-enabled
  (add-to-list 'load-path ecb-elisp-dir)
  (require 'ecb))

;; Loading Magit
(when magit-enabled
  (add-to-list 'load-path magit-elisp-dir)
  (require 'magit))

;; Loading Flymake
(when flymake-enabled
  (add-hook 'find-file-hook flymake-find-file-hook))

;; Loading Midnight
(when midnight-enabled (require 'midnight))

;; Loading hpaste
(when hpaste-enabled (require 'hpaste))

;; Loading Linum globally
(when linum-enabled (global-linum-mode 1))
